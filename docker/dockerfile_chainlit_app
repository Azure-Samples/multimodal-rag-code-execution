# Use a specific version of the python image for more predictable builds
FROM python:3.10.4-slim-buster

# Create a non-root user 'appuser' and set the home directory
RUN adduser --disabled-password --gecos '' --home /home/appuser appuser

# Install system dependencies
# Combine update, install, and cleanup steps to minimize image layers and reduce size
RUN apt-get update && apt-get install -y \
    graphviz \
    libgraphviz-dev \
    python-tk \
    python3-tk \
    tk-dev \
    libffi-dev \
    git \
    && rm -rf /var/lib/apt/lists/*  # Clean up to reduce image size

# Set the working directory
WORKDIR /home/appuser/app/

# Copy just the requirements.txt first to leverage Docker cache
COPY requirements.txt .

# Install Python dependencies
RUN pip install --requirement requirements.txt \
    && rm -rf /root/.cache/pip  # Clean up pip cache to reduce image size

# Pre-create directories that the application will need at runtime, ensuring correct ownership
RUN mkdir -p /home/appuser/app/.files && chown -R appuser:appuser /home/appuser/app

# Copy the application code and other files with the correct ownership
COPY --chown=appuser:appuser ./UI/ ./UI
COPY --chown=appuser:appuser ./code/ ./code/
COPY --chown=appuser:appuser ./UI/chainlit.md /home/appuser/app/code/chainlit.md
COPY --chown=appuser:appuser ./UI/chainlit.md /home/appuser/app/chainlit.md
COPY --chown=appuser:appuser ./UI/chainlit.md /home/appuser/app/UI/pages/chainlit.md

# Switch to the non-root user for subsequent commands and container runtime
USER appuser

# Expose the application port
EXPOSE 8000

# Health check to improve the resilience of your application
# Replace "executable" with a command to check the health of your application
# For a web app, this could be a curl command to its health endpoint
# HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
# CMD [ "curl", "-f", "http://localhost:8000/health" ]

# Run the application
CMD ["chainlit", "run", "./UI/chain-chat.py"]
